import Head from 'next/head';
import Image from 'next/image';
import TournamentNavigation from '../../../src/tournaments/TournamentNavigation';
import Wrapper from '../../../src/layout/Wrapper';
import {
  getPlayersFromTournament,
  getTournament,
} from '../../../src/queries/tournaments';
import { Champion, Player, Tournament } from '@prisma/client';
import { ChangeEvent, useState } from 'react';
import Link from 'next/link';
import { getTournamentParams } from '../../../src/helpers/params/getTournamentParams';
import { getIcon, getWaywinIcon } from '../../../src/helpers/image.helpers';
import { getWaywinTooltip } from '../../../src/helpers/tooltip.helpers';
import { PlayerPlacement } from '../../../types/types';
import PlayerCard from '../../../src/common/PlayerCard';

interface Count {
  count: number;
}
interface Results {
  wins: number;
  loses: number;
}
interface PlayerInfo {
  record: Results;
  champions: (Champion & Count)[];
  placement: PlayerPlacement;
}
interface TournamentPlayersProps {
  players: (Player & PlayerInfo)[];
  tournament: Tournament;
}

export default function TournamentPlayers(props: TournamentPlayersProps) {
  const [player, setPlayer] = useState<(Player & PlayerInfo) | null>(null);
  const [search, setSearch] = useState('');

  const players = props.players.filter((p) =>
    p.name?.toLowerCase()?.includes(search.toLowerCase())
  );

  const onChange = (event: ChangeEvent<HTMLInputElement>) => {
    setSearch(event.target.value);
  };

  return (
    <Wrapper>
      <Head>
        <title>Prokrastynatorzy - {props.tournament.name} - Zawodnicy</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex w-0 flex-grow flex-col justify-center">
        <TournamentNavigation
          tournamentId={props.tournament.id}
          name={props.tournament.name}
          winner={'Hauche'}
        />

        <div className="flex h-full max-h-full gap-12 overflow-hidden py-12 px-24">
          <div className="flex h-full max-h-full w-1/3 flex-col justify-between px-4">
            <input
              className="h-1/12 w-full rounded-md bg-stone-500 py-2 indent-4 text-2xl text-stone-900 outline-none outline-double placeholder:text-stone-800 focus-visible:outline-8 focus-visible:outline-stone-800"
              type="text"
              placeholder="Szukaj"
              value={search}
              onChange={onChange}
            />
            <div className="flex h-5/6 flex-col gap-4 overflow-y-auto pr-4">
              {players.map((player, idx) => (
                <div
                  key={`player-${player.id}`}
                  onClick={() => setPlayer(player)}
                  onKeyPress={() => setPlayer(player)}
                  tabIndex={idx}
                  role="button"
                  className="w-full cursor-pointer rounded-md border-2 border-stone-600 bg-stone-800 p-4 text-stone-400 hover:brightness-110">
                  {player.name}
                </div>
              ))}
            </div>
          </div>
          <div className="flex h-full w-1/3 flex-col items-center justify-evenly gap-5">
            <div className="w-full self-center">
              {player && (
                <PlayerCard
                  player={player}
                  tournamentName={props.tournament.name}
                />
              )}
            </div>
            <div className="h-12">
              {player?.id && (
                <Link href={`/players/${player?.id}`} passHref>
                  <a className="rounded-xl border-2 border-stone-600 bg-stone-800 p-2 text-stone-400">
                    {'PrzejdÅº do profilu gracza >>'}
                  </a>
                </Link>
              )}
            </div>
          </div>
          <div className="w-1/3">
            <div className="mb-4 w-full border-b-2 border-stone-400 pb-2 text-center text-2xl text-stone-400">
              Historia
            </div>
            <div className="flex flex-col gap-4">
              {player?.playerMatches.map((pm) => {
                const side = pm.match.playerMatches.find(
                  (pm2) => pm2.playerId === player?.id
                ).side;
                const firstSide =
                  side === 'BLUE' ? 'border-blue-900' : 'border-red-900';
                const secondSide =
                  side === 'RED' ? 'border-blue-900' : 'border-red-900';
                const opponentIndex = side === 'BLUE' ? 1 : 0;
                const firstGrayscale =
                  pm.match.winside === side ? '' : 'grayscale';
                const secondGrayscale =
                  pm.match.winside !== side ? '' : 'grayscale';

                return (
                  <div
                    key={pm.match.id}
                    className="flex w-full justify-between px-2 text-white">
                    <div className="flex flex-grow basis-0 justify-center">
                      <Link href={`/champions/${pm.champion.slug}`} passHref>
                        <a>
                          <div
                            className={`relative h-16 w-16 cursor-pointer border-2 ${firstSide}`}>
                            <Image
                              src={getIcon(pm.champion.name)}
                              alt={pm.champion.name}
                              title={pm.champion.name}
                              layout="fill"
                              objectFit="cover"
                              objectPosition="center"
                              className={firstGrayscale}
                            />
                          </div>
                        </a>
                      </Link>
                    </div>
                    <div className="relative grid h-8 flex-grow basis-0 place-items-center self-center">
                      <Link href={`/matches/${pm.match.id}`} passHref>
                        <a>
                          <Image
                            src={getWaywinIcon(pm.match.waywin)}
                            alt={pm.match.waywin}
                            title={getWaywinTooltip(pm.match.waywin)}
                            layout="fill"
                            objectFit="contain"
                            objectPosition="center"
                            className={`invert ${
                              firstGrayscale ? '-scale-x-100' : ''
                            }`}
                          />
                        </a>
                      </Link>
                    </div>
                    <div className="flex flex-grow basis-0 flex-col items-center">
                      <Link
                        href={`/champions/${pm.match.playerMatches[opponentIndex].champion.slug}`}
                        passHref>
                        <a>
                          <div
                            className={`relative h-16 w-16 cursor-pointer border-2 ${secondSide}`}>
                            <Image
                              src={getIcon(
                                pm.match.playerMatches[opponentIndex].champion
                                  .name
                              )}
                              alt={
                                pm.match.playerMatches[opponentIndex].champion
                                  .name
                              }
                              layout="fill"
                              title={
                                pm.match.playerMatches[opponentIndex].champion
                                  .name
                              }
                              objectFit="cover"
                              objectPosition="center"
                              className={secondGrayscale}
                            />
                          </div>
                        </a>
                      </Link>
                      <div
                        onClick={() => {
                          setPlayer(
                            players.find(
                              (p) =>
                                p.id ===
                                pm.match.playerMatches[opponentIndex].playerId
                            )
                          );
                          setSearch('');
                        }}
                        className="cursor-pointer text-center hover:underline">
                        {pm.match.playerMatches[opponentIndex].player.name}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </Wrapper>
  );
}

export async function getStaticPaths() {
  return getTournamentParams();
}

export async function getStaticProps({ params }: any) {
  const tournamentId = Number(params.tournamentId);
  const tournament = await getTournament(tournamentId);
  const players = await getPlayersFromTournament(tournamentId);

  return {
    props: {
      tournament,
      players,
    },
  };
}
