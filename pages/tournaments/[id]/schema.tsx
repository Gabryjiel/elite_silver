import Head from 'next/head';
import TournamentNavigation from '../../../components/tournaments/TournamentNavigation';
import Wrapper from '../../../components/layout/Wrapper';
import { GetStaticPaths, GetStaticProps } from 'next';
import { pluckTournamentIds, getTournament } from '../../../prisma/queries';
import { mapToTournamentDTO } from '../../../prisma/dtos/mapToTournamentDTO';
import { TournamentDTO } from '../../../types/dtos';

type Paths = {
  id: string;
};

interface Props {
  tournament: TournamentDTO;
}

export default function TournamentSchema(props: Props) {
  return (
    <Wrapper>
      <Head>
        <title>Elite Silver - {props.tournament.name} - Drabinka</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <TournamentNavigation
        tournamentId={props.tournament.id}
        name={props.tournament.name}
        winner={'Hauche'}
      />
    </Wrapper>
  );
}

export const getStaticPaths: GetStaticPaths<Paths> = async () => {
  const tournaments = await pluckTournamentIds();

  return {
    fallback: false,
    paths: tournaments.map(({ id }) => ({
      params: {
        id: id.toString(),
      },
    })),
  };
};

export const getStaticProps: GetStaticProps<Props, Paths> = async (context) => {
  const tournamentId = parseInt(context.params?.id ?? '0');
  const tournament = await getTournament(tournamentId);

  if (tournament == null) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      tournament: mapToTournamentDTO(tournament),
    },
  };
};
