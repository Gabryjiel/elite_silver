generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ban {

  matchId    Int @map("ban_mat_id")
  playerId   Int @map("ban_pla_id")
  championId Int @map("ban_cha_id")

  match    Match    @relation(fields: [matchId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  champion Champion @relation(fields: [championId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player   Player   @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@id([matchId, playerId, championId])
  @@map("bans")
}

model Champion {

  id   Int    @id @default(autoincrement()) @map("cha_id")
  name String @map("cha_name") @db.VarChar(32)

  bans          Ban[]
  playerMatches PlayerMatch[]
  @@map("champions")
}

enum Side {
  BLUE
  RED
}

enum Waywin {
  KILL
  CS
  TOWER
}

model Match {

  id           Int    @id @default(autoincrement()) @map("mat_id")
  tournamentId Int    @map("mat_tou_id")
  stageId      Int    @map("mat_stg_id")
  waywin       Waywin @default(KILL) @map("mat_way_id")
  winside      Side   @default(BLUE) @map("mat_winside")
  duration     Int    @default(0) @map("mat_duration")

  tournament    Tournament    @relation(fields: [tournamentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stage         Stage         @relation(fields: [stageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bans          Ban[]
  playerMatches PlayerMatch[]
  @@map("matches")
}

model PlayerMatch {

  matchId    Int  @map("plm_mat_id")
  playerId   Int  @map("plm_pla_id")
  championId Int  @map("plm_cha_id")
  cs         Int  @default(0) @map("plm_cs")
  side       Side @default(BLUE) @map("plm_side")

  champion Champion @relation(fields: [championId], references: [id])
  player   Player   @relation(fields: [playerId], references: [id])
  match    Match    @relation(fields: [matchId], references: [id])
  @@id([matchId, playerId])
  @@map("players_matches")
}

model Player {

  id     Int     @id @default(autoincrement()) @map("pla_id")
  name   String? @map("pla_name") @db.VarChar(32)
  rankId Int     @map("pla_rnk_id")

  rank          Rank          @relation(fields: [rankId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bans          Ban[]
  playerMatches PlayerMatch[]
  @@map("players")
}

model Rank {

  id   Int     @id @default(autoincrement()) @map("rnk_id")
  name String? @map("rnk_name") @db.VarChar(32)

  players Player[]
  @@map("ranks")
}

model Stage {

  id   Int     @id @default(autoincrement()) @map("stg_id")
  name String? @map("stg_name") @db.VarChar(32)

  matches Match[]
  @@map("stages")
}

model Tournament {

  id          Int      @id @default(autoincrement()) @map("tou_id")
  name        String   @map("tou_name") @db.VarChar(64)
  description String   @map("tou_description") @db.VarChar(512)
  startDate   DateTime @map("tou_start_date") @db.Timestamp(3)
  endDate     DateTime @map("tou_end_date") @db.Timestamp(4)
  createdAt   DateTime @default(now()) @map("tou_created_at") @db.Timestamp()
  updatedAt   DateTime @updatedAt() @map("tou_updated_at") @db.Timestamp(1)

  matches Match[]
  @@map("tournaments")
}
