import { GetStaticPaths, GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';

import {
  getPlayerCardInfos,
  getUserById,
  getUserMatches,
  PlayerCardInfo,
  pluckPlayerIds,
} from '../../../../prisma/queries';
import { PlayerPageLayout } from '../../../components/layouts';
import { getIcon } from '../../../lib/image.helpers';
import { NextPageWithLayout } from '../../../types';
import { GlobalContext } from '../../_app';

type Paths = {
  id: string;
};

type Props = {
  user: Awaited<ReturnType<typeof getUserById>>;
  cardInfos: PlayerCardInfo[];
  matches: Awaited<ReturnType<typeof getUserMatches>>;
};

type PageProps = Props & GlobalContext;

export const getStaticPaths: GetStaticPaths<Paths> = async () => {
  const userIds = await pluckPlayerIds();

  return {
    fallback: false,
    paths: userIds.map(({ id }) => ({
      params: {
        id: id.toString(),
      },
    })),
  };
};

export const getStaticProps: GetStaticProps<Props, Paths> = async (context) => {
  const userId = parseInt(context.params?.id ?? '0');
  const user = await getUserById(userId);

  if (!user) {
    return {
      notFound: true,
    };
  }

  const cardInfos = await getPlayerCardInfos(userId);
  const matches = await getUserMatches(userId);

  return {
    props: {
      cardInfos,
      user,
      matches,
    },
  };
};

const PlayerOpponents: NextPageWithLayout<PageProps> = ({ user, matches }) => {
  return (
    <>
      <Head>
        <title>ES - {user?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div
        data-role="match-container"
        className="flex h-full w-full flex-col gap-10 overflow-y-auto px-12"
      >
        {matches.map((match) => {
          const bluePM = match.matches[0].playerMatches[0];
          const redPM = match.matches[0].playerMatches[1];

          return (
            <div
              key={`match-${match.id}`}
              className="flex w-full justify-between rounded-xl border-2 border-stone-400 bg-stone-700 py-2 px-2"
            >
              <div
                data-role="blue-player"
                className="flex w-2/5 items-center justify-between"
              >
                <div className="flex gap-2">
                  {match.matches.map((m) => {
                    return (
                      <div
                        key={`blue-champion-icon-${m.id}`}
                        className="relative aspect-square h-16"
                      >
                        <Image
                          alt={m.playerMatches[0].champion?.name}
                          layout="fill"
                          objectFit="cover"
                          src={getIcon(m.playerMatches[0].champion?.name ?? '')}
                          title={m.playerMatches[0].champion?.name}
                        />
                      </div>
                    );
                  })}
                </div>
                <span>{bluePM.player.name}</span>
              </div>
              <div
                data-role="match-details"
                className="flex flex-col text-center"
              >
                <span>
                  {match.score.player1} : {match.score.player2}
                </span>
                <span>{match.tournament.name}</span>
                <span>{match.stage.name}</span>
              </div>
              <div
                data-role="red-player"
                className="flex w-2/5 flex-row-reverse items-center justify-between"
              >
                <div className="flex flex-row-reverse gap-2">
                  {match.matches.map((m) => {
                    return (
                      <div
                        key={`red-champion-icon-${m.id}`}
                        className="relative aspect-square h-16"
                      >
                        <Image
                          alt={m.playerMatches[1].champion?.name}
                          layout="fill"
                          objectFit="cover"
                          src={getIcon(m.playerMatches[1].champion?.name ?? '')}
                          title={m.playerMatches[1].champion?.name}
                        />
                      </div>
                    );
                  })}
                </div>
                <span>{redPM.player.name}</span>
              </div>
            </div>
          );
        })}
      </div>
    </>
  );
};

PlayerOpponents.getLayout = (page) => {
  return (
    <PlayerPageLayout cardInfos={page.props.cardInfos} user={page.props.user}>
      {page}
    </PlayerPageLayout>
  );
};

export default PlayerOpponents;
